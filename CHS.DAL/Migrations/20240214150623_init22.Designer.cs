// <auto-generated />
using System;
using CHS.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CHS.DAL.Migrations
{
    [DbContext(typeof(CreditHoursSystemContext))]
    [Migration("20240214150623_init22")]
    partial class init22
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CHS.DAL.Entites.ClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("classCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClassRooms");
                });

            modelBuilder.Entity("CHS.DAL.Entites.CourseHasSemester", b =>
                {
                    b.Property<string>("SemsterTitle")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("NumberOfStudentsEnrolled")
                        .HasColumnType("int");

                    b.HasKey("SemsterTitle", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHasSemesters");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Enroll", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrolls");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Evaluate", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalGrade")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<decimal>("MidtermGrade")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<decimal>("ProjectGrade")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<decimal>("TotalGrade")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("WorksGrade")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("StudentId", "CourseId", "InstructorId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Evaluates");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InstructorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructorPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instructors");

                    b.HasDiscriminator<string>("InstructorType").HasValue("Instructor");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CHS.DAL.Entites.Interval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("EndInterval")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<decimal>("StartInterval")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("Id");

                    b.ToTable("Interval");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassRoomId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntervalIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeTableId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("IntervalIdFk")
                        .IsUnique();

                    b.HasIndex("TimeTableId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Record", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("InstructorId", "StudentId", "LectureId");

                    b.HasIndex("LectureId");

                    b.HasIndex("StudentId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Semester", b =>
                {
                    b.Property<string>("SemesterTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SemesterTitle");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Teach", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Teaches");
                });

            modelBuilder.Entity("CHS.DAL.Entites.TimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassRoomId")
                        .HasColumnType("int");

                    b.Property<string>("SemesterTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("SemesterTitle")
                        .IsUnique();

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("CHS.DAL.Entities.Course", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ClassRoomId")
                        .HasColumnType("int");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Mandatorness")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PrerequisiteCode")
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CourseCode");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("PrerequisiteCode");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CHS.DAL.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1000000L);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinishedHours")
                        .HasColumnType("int");

                    b.Property<decimal>("Gpa")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CHS.DAL.Entities.StudentFinishedCourses", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("FinishedCourses")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "FinishedCourses");

                    b.ToTable("StudentFinishedCourses");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Professor", b =>
                {
                    b.HasBaseType("CHS.DAL.Entites.Instructor");

                    b.Property<int>("OfficeHours")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("CHS.DAL.Entites.TeachingAssistant", b =>
                {
                    b.HasBaseType("CHS.DAL.Entites.Instructor");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TeachingAssistant");
                });

            modelBuilder.Entity("CHS.DAL.Entites.CourseHasSemester", b =>
                {
                    b.HasOne("CHS.DAL.Entities.Course", "Course")
                        .WithMany("courseHasSemesters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHS.DAL.Entites.Semester", "Semester")
                        .WithMany("courseHasSemesters")
                        .HasForeignKey("SemsterTitle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Enroll", b =>
                {
                    b.HasOne("CHS.DAL.Entities.Course", "Course")
                        .WithMany("Enrolls")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHS.DAL.Entities.Student", "Student")
                        .WithMany("Enrolls")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Evaluate", b =>
                {
                    b.HasOne("CHS.DAL.Entities.Course", "Course")
                        .WithMany("Evaluates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHS.DAL.Entites.Instructor", "Instructor")
                        .WithMany("Evaluates")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHS.DAL.Entities.Student", "Student")
                        .WithMany("Evaluates")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Lecture", b =>
                {
                    b.HasOne("CHS.DAL.Entites.ClassRoom", "ClassRoom")
                        .WithMany("Lectures")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHS.DAL.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHS.DAL.Entites.Interval", "Interval")
                        .WithOne("Lecture")
                        .HasForeignKey("CHS.DAL.Entites.Lecture", "IntervalIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHS.DAL.Entites.TimeTable", "TimeTable")
                        .WithMany("Lectures")
                        .HasForeignKey("TimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("Course");

                    b.Navigation("Interval");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Record", b =>
                {
                    b.HasOne("CHS.DAL.Entites.Instructor", "Instructor")
                        .WithMany("Records")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHS.DAL.Entites.Lecture", "Lecture")
                        .WithMany("Records")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHS.DAL.Entities.Student", "Student")
                        .WithMany("Records")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Lecture");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Teach", b =>
                {
                    b.HasOne("CHS.DAL.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHS.DAL.Entites.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("CHS.DAL.Entites.TimeTable", b =>
                {
                    b.HasOne("CHS.DAL.Entites.ClassRoom", null)
                        .WithMany("TimeTables")
                        .HasForeignKey("ClassRoomId");

                    b.HasOne("CHS.DAL.Entites.Semester", "Semester")
                        .WithOne("TimeTable")
                        .HasForeignKey("CHS.DAL.Entites.TimeTable", "SemesterTitle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("CHS.DAL.Entities.Course", b =>
                {
                    b.HasOne("CHS.DAL.Entites.ClassRoom", null)
                        .WithMany("Courses")
                        .HasForeignKey("ClassRoomId");

                    b.HasOne("CHS.DAL.Entities.Course", "PrerequisiteCourse")
                        .WithMany()
                        .HasForeignKey("PrerequisiteCode");

                    b.Navigation("PrerequisiteCourse");
                });

            modelBuilder.Entity("CHS.DAL.Entities.StudentFinishedCourses", b =>
                {
                    b.HasOne("CHS.DAL.Entities.Student", "Student")
                        .WithMany("StudentFinishedCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CHS.DAL.Entites.ClassRoom", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Lectures");

                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Instructor", b =>
                {
                    b.Navigation("Evaluates");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Interval", b =>
                {
                    b.Navigation("Lecture")
                        .IsRequired();
                });

            modelBuilder.Entity("CHS.DAL.Entites.Lecture", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("CHS.DAL.Entites.Semester", b =>
                {
                    b.Navigation("TimeTable");

                    b.Navigation("courseHasSemesters");
                });

            modelBuilder.Entity("CHS.DAL.Entites.TimeTable", b =>
                {
                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("CHS.DAL.Entities.Course", b =>
                {
                    b.Navigation("Enrolls");

                    b.Navigation("Evaluates");

                    b.Navigation("courseHasSemesters");
                });

            modelBuilder.Entity("CHS.DAL.Entities.Student", b =>
                {
                    b.Navigation("Enrolls");

                    b.Navigation("Evaluates");

                    b.Navigation("Records");

                    b.Navigation("StudentFinishedCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
